//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// 
// ridge_smooth.cpp
// 
// Simple driver which takes the LH, Relief and CHT files generated by LH_Driver
// and smooths the data and generates E* R* data in 1 file. Thiss file has a header
// and is organised into two comma separated columns, E* and R*.
//
// This driver smooths the input data then calculates the E*R* values.
//
// Input argument is the critical slope value as a floating point number eg 0.8 
//
// Paths and filenames must be ,anually set by the user.
//
// Stuart W.D. Grieve
// University of Edinburgh
//
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include "../LSDStatsTools.hpp"
#include "../LSDRaster.hpp"
#include "../LSDIndexRaster.hpp"
#include "../LSDFlowInfo.hpp"
#include "../LSDChannel.hpp"
#include "../LSDJunctionNetwork.hpp"
#include "../LSDIndexChannel.hpp"
#include "../LSDMostLikelyPartitionsFinder.hpp"
#include "../LSDBasin.hpp"
#include "../LSDShapeTools.hpp"

int main (int nNumberofArgs,char *argv[])
{
  
  //Test for correct input arguments
	if (nNumberofArgs!=2)
	{ 
    cout << "Fire in a critical slope here." << endl;
		exit(EXIT_FAILURE);
	}
  
  //load input argument
  float S_c = atof(argv[1]);  
  
  string path = "/home/s0675405/DataStore/CR/";

  //load LH
  LSDRaster LH((path+"CR2_HFR_LH"), "flt"); 
  
  //load R
  LSDRaster R((path+"CR2_Relief"), "flt");
  
  //load CHT
  LSDRaster CHT((path+"CR2_CHT"), "flt");
  
  //run neighbourhood_statistics_spatial_average
  LSDRaster Smoothed_CHT = CHT.neighbourhood_statistics_spatial_average(25.0, 1);
  LSDRaster Smoothed_LH = LH.neighbourhood_statistics_spatial_average(25.0, 1);
  //LSDRaster Smoothed_R = R.neighbourhood_statistics_spatial_average(25.0, 1);
  
  
  vector<float> E_Stars;
  vector<float> R_Stars;
  
  float E_star = 0;
  float R_star = 0;
  
  string desc = "CHT_LH_Smooth";           
  
  float ndv = LH.get_NoDataValue();
  
  for (int i=0; i<LH.get_NRows(); ++i){
	  for (int j=0; j<LH.get_NCols(); ++j){
	  	if (Smoothed_CHT.get_data_element(i,j) != ndv && Smoothed_LH.get_data_element(i,j) != ndv && R.get_data_element(i,j) != ndv){
    
        //calculate E*
        E_star = (2.0 * abs(Smoothed_CHT.get_data_element(i,j))*Smoothed_LH.get_data_element(i,j))/S_c;  
        E_Stars.push_back(E_star);
        
        //Calculate R*
        R_star = R.get_data_element(i,j)/(Smoothed_LH.get_data_element(i,j)*S_c);    
        R_Stars.push_back(R_star);
      }  
	  }
	}
  
  ofstream WriteData;                 
  stringstream ss;
  ss << path << "ER_" << desc << "_sc_" << S_c <<".txt";                
  WriteData.open(ss.str().c_str());

  //write headers
  WriteData << "e_star,r_star" << endl;

  cout << "\nWriting data to file\n" << endl;

  //write all data to the opened file, ensuring that there are data points to be written in each basin                                         
  for (int q = 0; q < int(E_Stars.size()); ++q){
    
    WriteData << E_Stars[q] << "," << R_Stars[q] << endl;
      
  }    
   
   
  // close the output file
  WriteData.close();


}
